data = matrix(c(2,2,2,2,2), ncol=1)
source("hmm.R")
hidden_states = 2
observed_states = 2
baum_welch(data, hidden_states, observed_states)
data = read.csv('assign2.csv')
row = nrow(data)
col = ncol(data)
tdata = data[, 2:col]
data = matrix(rep(0, row*(col-1)), nrow = row)
for (i in 1:col-1) {
d = factor(tdata[, i], levels = c('L', 'R'), labels = c('1', '2'))
d = as.numeric(d)
data[, i] = matrix(d)
}
# data = matrix(c(2,2,2,2,2), ncol=1)
source("hmm.R")
hidden_states = 2
observed_states = 2
baum_welch(data, hidden_states, observed_states)
data = read.csv('assign2.csv')
row = nrow(data)
col = ncol(data)
tdata = data[, 2:col]
data = matrix(rep(0, row*(col-1)), nrow = row)
for (i in 1:col-1) {
d = factor(tdata[, i], levels = c('L', 'R'), labels = c('1', '2'))
d = as.numeric(d)
data[, i] = matrix(d)
}
# data = matrix(c(2,2,2,2,2), ncol=1)
source("hmm.R")
hidden_states = 2
observed_states = 2
baum_welch(data, hidden_states, observed_states)
data = read.csv('assign2.csv')
row = nrow(data)
col = ncol(data)
tdata = data[, 2:col]
data = matrix(rep(0, row*(col-1)), nrow = row)
for (i in 1:col-1) {
d = factor(tdata[, i], levels = c('L', 'R'), labels = c('1', '2'))
d = as.numeric(d)
data[, i] = matrix(d)
}
# data = matrix(c(2,2,2,2,2), ncol=1)
source("hmm.R")
hidden_states = 2
observed_states = 2
baum_welch(data, hidden_states, observed_states)
data = read.csv('assign2.csv')
row = nrow(data)
col = ncol(data)
tdata = data[, 2:col]
data = matrix(rep(0, row*(col-1)), nrow = row)
for (i in 1:col-1) {
d = factor(tdata[, i], levels = c('L', 'R'), labels = c('1', '2'))
d = as.numeric(d)
data[, i] = matrix(d)
}
# data = matrix(c(2,2,2,2,2), ncol=1)
source("hmm.R")
hidden_states = 2
observed_states = 2
baum_welch(data, hidden_states, observed_states)
data = read.csv('assign2.csv')
row = nrow(data)
col = ncol(data)
tdata = data[, 2:col]
data = matrix(rep(0, row*(col-1)), nrow = row)
for (i in 1:col-1) {
d = factor(tdata[, i], levels = c('L', 'R'), labels = c('1', '2'))
d = as.numeric(d)
data[, i] = matrix(d)
}
# data = matrix(c(2,2,2,2,2), ncol=1)
source("hmm.R")
hidden_states = 2
observed_states = 2
baum_welch(data, hidden_states, observed_states)
data = read.csv('assign2.csv')
row = nrow(data)
col = ncol(data)
tdata = data[, 2:col]
data = matrix(rep(0, row*(col-1)), nrow = row)
for (i in 1:col-1) {
d = factor(tdata[, i], levels = c('L', 'R'), labels = c('1', '2'))
d = as.numeric(d)
data[, i] = matrix(d)
}
# data = matrix(c(2,2,2,2,2), ncol=1)
source("hmm.R")
hidden_states = 2
observed_states = 2
baum_welch(data, hidden_states, observed_states)
data = read.csv('assign2.csv')
row = nrow(data)
col = ncol(data)
tdata = data[, 2:col]
data = matrix(rep(0, row*(col-1)), nrow = row)
for (i in 1:col-1) {
d = factor(tdata[, i], levels = c('L', 'R'), labels = c('1', '2'))
d = as.numeric(d)
data[, i] = matrix(d)
}
# data = matrix(c(2,2,2,2,2), ncol=1)
source("hmm.R")
hidden_states = 2
observed_states = 2
baum_welch(data, hidden_states, observed_states)
data = read.csv('assign2.csv')
row = nrow(data)
col = ncol(data)
tdata = data[, 2:col]
data = matrix(rep(0, row*(col-1)), nrow = row)
for (i in 1:col-1) {
d = factor(tdata[, i], levels = c('L', 'R'), labels = c('1', '2'))
d = as.numeric(d)
data[, i] = matrix(d)
}
# data = matrix(c(2,2,2,2,2), ncol=1)
source("hmm.R")
hidden_states = 2
observed_states = 2
baum_welch(data, hidden_states, observed_states)
data = read.csv('assign2.csv')
row = nrow(data)
col = ncol(data)
tdata = data[, 2:col]
data = matrix(rep(0, row*(col-1)), nrow = row)
for (i in 1:col-1) {
d = factor(tdata[, i], levels = c('L', 'R'), labels = c('1', '2'))
d = as.numeric(d)
data[, i] = matrix(d)
}
# data = matrix(c(2,2,2,2,2), ncol=1)
source("hmm.R")
hidden_states = 2
observed_states = 2
baum_welch(data, hidden_states, observed_states)
data = read.csv('assign2.csv')
row = nrow(data)
col = ncol(data)
tdata = data[, 2:col]
data = matrix(rep(0, row*(col-1)), nrow = row)
for (i in 1:col-1) {
d = factor(tdata[, i], levels = c('L', 'R'), labels = c('1', '2'))
d = as.numeric(d)
data[, i] = matrix(d)
}
# data = matrix(c(2,2,2,2,2), ncol=1)
source("hmm.R")
hidden_states = 2
observed_states = 2
baum_welch(data, hidden_states, observed_states)
data = read.csv('assign2.csv')
row = nrow(data)
col = ncol(data)
tdata = data[, 2:col]
data = matrix(rep(0, row*(col-1)), nrow = row)
for (i in 1:col-1) {
d = factor(tdata[, i], levels = c('L', 'R'), labels = c('1', '2'))
d = as.numeric(d)
data[, i] = matrix(d)
}
# data = matrix(c(2,2,2,2,2), ncol=1)
source("hmm.R")
hidden_states = 2
observed_states = 2
baum_welch(data, hidden_states, observed_states)
data = read.csv('assign2.csv')
row = nrow(data)
col = ncol(data)
tdata = data[, 2:col]
data = matrix(rep(0, row*(col-1)), nrow = row)
for (i in 1:col-1) {
d = factor(tdata[, i], levels = c('L', 'R'), labels = c('1', '2'))
d = as.numeric(d)
data[, i] = matrix(d)
}
# data = matrix(c(2,2,2,2,2), ncol=1)
source("hmm.R")
hidden_states = 2
observed_states = 2
baum_welch(data, hidden_states, observed_states)
data = read.csv('assign2.csv')
row = nrow(data)
col = ncol(data)
tdata = data[, 2:col]
data = matrix(rep(0, row*(col-1)), nrow = row)
for (i in 1:col-1) {
d = factor(tdata[, i], levels = c('L', 'R'), labels = c('1', '2'))
d = as.numeric(d)
data[, i] = matrix(d)
}
# data = matrix(c(2,2,2,2,2), ncol=1)
source("hmm.R")
hidden_states = 2
observed_states = 2
baum_welch(data, hidden_states, observed_states)
data = read.csv('assign2.csv')
row = nrow(data)
col = ncol(data)
tdata = data[, 2:col]
data = matrix(rep(0, row*(col-1)), nrow = row)
for (i in 1:col-1) {
d = factor(tdata[, i], levels = c('L', 'R'), labels = c('1', '2'))
d = as.numeric(d)
data[, i] = matrix(d)
}
# data = matrix(c(2,2,2,2,2), ncol=1)
source("hmm.R")
hidden_states = 2
observed_states = 2
baum_welch(data, hidden_states, observed_states)
a = matrix(rep(0, 100), ncol=10)
a
a[1,] = c(1,2,3,4,5,6,7,8,9)
a[1,] = c(1,2,3,4,5,6,7,8,9,10)
a
max(a[1, ])
a[-1]
a[-1, p1]
a[-1, -1]
b = a[1]
b
b = a[1, ]
b
b[-1]
b[-9]
argmax
a
b
which(b == max(b))
a
which(a[, 10] == max(a[, 10]))
data = read.csv('assign2.csv')
row = nrow(data)
col = ncol(data)
tdata = data[, 2:col]
data = matrix(rep(0, row*(col-1)), nrow = row)
for (i in 1:col-1) {
d = factor(tdata[, i], levels = c('L', 'R'), labels = c('1', '2'))
d = as.numeric(d)
data[, i] = matrix(d)
}
# data = matrix(c(2,2,2,2,2), ncol=1)
source("hmm.R")
hidden_states = 2
observed_states = 2
rlist = baum_welch(data, hidden_states, observed_states)
a = rlist[[1]]
e = rlist[[2]]
s1 = viterbi(data[, 1], a, e)
s2 = viterbi(data[, 2], a, e)
a
e
s1 = viterbi(data[, 1], a, e)
s2 = viterbi(data[, 2], a, e)
# data = matrix(c(2,2,2,2,2), ncol=1)
source("hmm.R")
hidden_states = 2
observed_states = 2
rlist = baum_welch(data, hidden_states, observed_states)
a = rlist[[1]]
e = rlist[[2]]
s1 = viterbi(data[, 1], a, e)
s2 = viterbi(data[, 2], a, e)
s1 = viterbi(data[, 1], a, e)
s2 = viterbi(data[, 2], a, e)
# data = matrix(c(2,2,2,2,2), ncol=1)
source("hmm.R")
hidden_states = 2
observed_states = 2
rlist = baum_welch(data, hidden_states, observed_states)
a = rlist[[1]]
e = rlist[[2]]
s1 = viterbi(data[, 1], a, e)
s2 = viterbi(data[, 2], a, e)
a
nrow(a)
nrow(x)
e
nrow(e)
data
data[, 1]
nrow(data[, 1])
matrix(data[, 1])
s1 = viterbi(matrix(data[, 1]), a, e)
s2 = viterbi(matrix(data[, 2]), a, e)
# data = matrix(c(2,2,2,2,2), ncol=1)
source("hmm.R")
hidden_states = 2
observed_states = 2
rlist = baum_welch(data, hidden_states, observed_states)
a = rlist[[1]]
e = rlist[[2]]
s1 = viterbi(matrix(data[, 1]), a, e)
s2 = viterbi(matrix(data[, 2]), a, e)
# data = matrix(c(2,2,2,2,2), ncol=1)
source("hmm.R")
hidden_states = 2
observed_states = 2
rlist = baum_welch(data, hidden_states, observed_states)
a = rlist[[1]]
e = rlist[[2]]
s1 = viterbi(matrix(data[, 1]), a, e)
s2 = viterbi(matrix(data[, 2]), a, e)
# data = matrix(c(2,2,2,2,2), ncol=1)
source("hmm.R")
hidden_states = 2
observed_states = 2
rlist = baum_welch(data, hidden_states, observed_states)
a = rlist[[1]]
e = rlist[[2]]
s1 = viterbi(matrix(data[, 1]), a, e)
s2 = viterbi(matrix(data[, 2]), a, e)
# data = matrix(c(2,2,2,2,2), ncol=1)
source("hmm.R")
hidden_states = 2
observed_states = 2
rlist = baum_welch(data, hidden_states, observed_states)
a = rlist[[1]]
e = rlist[[2]]
s1 = viterbi(matrix(data[, 1]), a, e)
s2 = viterbi(matrix(data[, 2]), a, e)
# data = matrix(c(2,2,2,2,2), ncol=1)
source("hmm.R")
hidden_states = 2
observed_states = 2
rlist = baum_welch(data, hidden_states, observed_states)
a = rlist[[1]]
e = rlist[[2]]
s1 = viterbi(matrix(data[, 1]), a, e)
s2 = viterbi(matrix(data[, 2]), a, e)
s1
s2
s1
a
b
e
source("hmm.R")
hidden_states = 2
observed_states = 2
rlist = baum_welch(data, hidden_states, observed_states)
a = rlist[[1]]
e = rlist[[2]]
s1 = viterbi(matrix(data[, 1]), a, e)
s2 = viterbi(matrix(data[, 2]), a, e)
source("hmm.R")
hidden_states = 2
observed_states = 2
rlist = baum_welch(data, hidden_states, observed_states)
a = rlist[[1]]
e = rlist[[2]]
s1 = viterbi(matrix(data[, 1]), a, e)
s2 = viterbi(matrix(data[, 2]), a, e)
v
a
source("hmm.R")
hidden_states = 2
observed_states = 2
rlist = baum_welch(data, hidden_states, observed_states)
a = rlist[[1]]
e = rlist[[2]]
s1 = viterbi(matrix(data[, 1]), a, e)
s2 = viterbi(matrix(data[, 2]), a, e)
source("hmm.R")
hidden_states = 2
observed_states = 2
rlist = baum_welch(data, hidden_states, observed_states)
a = rlist[[1]]
e = rlist[[2]]
s1 = viterbi(matrix(data[, 1]), a, e)
s2 = viterbi(matrix(data[, 2]), a, e)
source("hmm.R")
hidden_states = 2
observed_states = 2
rlist = baum_welch(data, hidden_states, observed_states)
a = rlist[[1]]
e = rlist[[2]]
s1 = viterbi(matrix(data[, 1]), a, e)
s2 = viterbi(matrix(data[, 2]), a, e)
source("hmm.R")
hidden_states = 2
observed_states = 2
rlist = baum_welch(data, hidden_states, observed_states)
a = rlist[[1]]
e = rlist[[2]]
s1 = viterbi(matrix(data[, 1]), a, e)
s2 = viterbi(matrix(data[, 2]), a, e)
source("hmm.R")
hidden_states = 2
observed_states = 2
rlist = baum_welch(data, hidden_states, observed_states)
a = rlist[[1]]
e = rlist[[2]]
s1 = viterbi(matrix(data[, 1]), a, e)
s2 = viterbi(matrix(data[, 2]), a, e)
source("hmm.R")
hidden_states = 2
observed_states = 2
rlist = baum_welch(data, hidden_states, observed_states)
a = rlist[[1]]
e = rlist[[2]]
s1 = viterbi(matrix(data[, 1]), a, e)
s2 = viterbi(matrix(data[, 2]), a, e)
source("hmm.R")
hidden_states = 2
observed_states = 2
rlist = baum_welch(data, hidden_states, observed_states)
a = rlist[[1]]
e = rlist[[2]]
s1 = viterbi(matrix(data[, 1]), a, e)
s2 = viterbi(matrix(data[, 2]), a, e)
source("hmm.R")
hidden_states = 2
observed_states = 2
rlist = baum_welch(data, hidden_states, observed_states)
a = rlist[[1]]
e = rlist[[2]]
s1 = viterbi(matrix(data[, 1]), a, e)
s2 = viterbi(matrix(data[, 2]), a, e)
source("hmm.R")
hidden_states = 2
observed_states = 2
rlist = baum_welch(data, hidden_states, observed_states)
a = rlist[[1]]
e = rlist[[2]]
s1 = viterbi(matrix(data[, 1]), a, e)
s2 = viterbi(matrix(data[, 2]), a, e)
source("hmm.R")
hidden_states = 2
observed_states = 2
rlist = baum_welch(data, hidden_states, observed_states)
a = rlist[[1]]
e = rlist[[2]]
s1 = viterbi(matrix(data[, 1]), a, e)
s2 = viterbi(matrix(data[, 2]), a, e)
for(i in 1:9)
print(i)
source("hmm.R")
hidden_states = 2
observed_states = 2
rlist = baum_welch(data, hidden_states, observed_states)
a = rlist[[1]]
e = rlist[[2]]
s1 = viterbi(matrix(data[, 1]), a, e)
s2 = viterbi(matrix(data[, 2]), a, e)
source("hmm.R")
hidden_states = 2
observed_states = 2
rlist = baum_welch(data, hidden_states, observed_states)
a = rlist[[1]]
e = rlist[[2]]
s1 = viterbi(matrix(data[, 1]), a, e)
s2 = viterbi(matrix(data[, 2]), a, e)
for(i in 2:10)
print(i-1)
source("hmm.R")
hidden_states = 2
observed_states = 2
rlist = baum_welch(data, hidden_states, observed_states)
a = rlist[[1]]
e = rlist[[2]]
s1 = viterbi(matrix(data[, 1]), a, e)
s2 = viterbi(matrix(data[, 2]), a, e)
s1
s2
source("hmm.R")
hidden_states = 2
observed_states = 2
rlist = baum_welch(data, hidden_states, observed_states)
a = rlist[[1]]
e = rlist[[2]]
s1 = viterbi(matrix(data[, 1]), a, e)
s2 = viterbi(matrix(data[, 2]), a, e)
sqrt(3)
source("hmm.R")
hidden_states = 2
observed_states = 2
rlist = baum_welch(data, hidden_states, observed_states)
a = rlist[[1]]
e = rlist[[2]]
s1 = viterbi(matrix(data[, 1]), a, e)
s2 = viterbi(matrix(data[, 2]), a, e)
source("hmm.R")
hidden_states = 2
observed_states = 2
rlist = baum_welch(data, hidden_states, observed_states)
a = rlist[[1]]
e = rlist[[2]]
s1 = viterbi(matrix(data[, 1]), a, e)
s2 = viterbi(matrix(data[, 2]), a, e)
s1
s2
5:-1:1
5:1:-1
5:-1
source("hmm.R")
hidden_states = 2
observed_states = 2
rlist = baum_welch(data, hidden_states, observed_states)
a = rlist[[1]]
e = rlist[[2]]
s1 = viterbi(matrix(data[, 1]), a, e)
s2 = viterbi(matrix(data[, 2]), a, e)
s1
s2
a
b
e
