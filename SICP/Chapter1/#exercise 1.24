(define (timed-prime-test n)
  (start-prime-test n (runtime)))

(define (start-prime-test n start-time)
  (if (prime? n)
      (report-prime n (- (runtime) start-time))))

(define (report-prime n elapsed-time)
  (newline)
  (display n)
  (display " *** ")
  (display elapsed-time))

(define (prime? n)
  (fast-prime? n 100))

(define (fermat-test n)
    (define (try-it a)
      (= (expmod a n n) a))
    (try-it (+ 1 (random (- n 1)))))

(define (expmod base exp m)
    (cond ((= exp 0) 1)
      ((even? exp)
          (remainder (square (expmod base (/ exp 2) m))
            m))
      (else
        (remainder (* base (expmod base (- exp 1) m))
          m))))

 (define (fast-prime? n times) 
   (cond ((= times 0) true) 
         ((fermat-test n) (fast-prime? n (- times 1))) 
         (else false)))
 
(define (smallest-divisor n)
  (find-divisor n 2))

(define (find-divisor n test-divisor)
  (cond ((> (square test-divisor) n) n)
	((divides? test-divisor n) test-divisor)
	(else (find-divisor n (+ test-divisor 1)))))

(define (square n)
  (* n n))

(define (divides? a b)
  (= (remainder b a) 0))

(define (search-for-primes first last)
  (define (search-iter current last)
    (if (<= current last) (timed-prime-test current))
    (if (<= current last) (search-iter (+ current 2) last)))
  (search-iter (if (even? first) (+ first 1) first) (if (even? last) (- last 1) last)))

(define (even? n)
  (= (remainder n 2) 0))

